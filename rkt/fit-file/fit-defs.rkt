#lang racket/base
;; fit-defs.rkt -- field definitions for enums in the FIT file format, this
;; file is based on data from Profile.xls from the FIT SDK.  You can download
;; the SDK from https://www.thisisant.com/resources/fit/
;;
;; This file is part of ActivityLog2, an fitness activity tracker
;; Copyright (C) 2015, 2018 Alex Hars√°nyi <AlexHarsanyi@gmail.com>
;;
;; This program is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the Free
;; Software Foundation, either version 3 of the License, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful, but WITHOUT
;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
;; more details.

(require racket/date)

;; Timestamps in the FIT file start from Dec 31, 1989
(define *fit-epoch* (find-seconds 0 0 0 31 12 1989 #f))
(provide *fit-epoch*)

(define (fit-time->unix-time t)
  ;; Convert a timestamp from FIT epoch to UNIX epoch
  (+ t *fit-epoch*))
(provide fit-time->unix-time)

(define (unix-time->fit-time t)
  ;; Convert a timestamp from UNIX epoch to FIT epoch
  (- t *fit-epoch*))
(provide unix-time->fit-time)

(define (fit-time->unix-time-local t)
  ;; Convert a timestamp from FIT epoch to the local time
  (let ((epoch (find-seconds 0 0 0 31 12 1989 #t)))
    (+ t epoch)))

(define (semicircles->degrees s)
  ;; Convert from the FIT representation of latitude/longitude to actual
  ;; degrees.
  (*  (/ s (expt 2 31)) 180.0))

(define (make-enum-lookup alist)
  (lambda (v)
    (let ((c (assq v alist)))
      (if c (cdr c) v))))

(define (div-by-10 v) (/ v 10.0))
(define (div-by-100 v) (/ v 100.0))
(define (div-by-1000 v) (/ v 1000.0))
(define (div-by-10000 v) (/ v 10000.0))
(define (div-by-128 v) (/ v 128.0))
(define (div-by-2 v) (/ v 2.0))


;.................................................... field definitions ....

(define *global-message-number*
  ;; mesg_num (from Profile.xls of the FIT data format documentation) we only
  ;; have the enums we know (and care) about.
  '((0 . file-id)
    (49 . file-creator)
    (18 . session)
    (19 . lap)
    (20 . record)
    (21 . event)
    (23 . device-info)
    (26 . workout)
    (27 . workout-step)
    (34 . activity)
    (101 . length)
    (29 . location)
    (12 . sport)
    (8 . hr-zone)
    (53 . speed-zone)
    (9 . power-zone)
    (7 . zones-target)
    (3 . user-profile)
    (78 . hrv)
    (206 . field-description)
    (207 . developer-data-id)
    (72 . training-file)))

(provide *global-message-number*)

(define *file-id-fields*
  '((0 . type)
    (1 . manufacturer)
    (2 . product)
    (3 . serial-number)
    (4 . time-created)
    (5 . number)))

(define *file-creator-fields*
  '((0 . software-version)
    (1 . hardware-version)))

(define *event-fields*
  '((253 . timestamp)
    (0 . event)
    (1 . event-type)
    (2 . data16)
    (3 . data)
    (4 . event-group)
    (7 . score)
    (8 . opponent-score)))

(define *record-fields*
  '((253 . timestamp)
    (0 . position-lat)
    (1 . position-long)
    (2 . altitude)
    (3 . heart-rate)
    (4 . cadence)
    (5 . distance)
    (6 . speed)
    (7 . power)
    (8 . compressed-speed-distance)
    (9 . grade)
    (10 . resistance)
    (11 . time-from-course)
    (12 . cycle-length)
    (13 . temperature)
    (17 . speed-1s)
    (18 . cycles)
    (19 . total-cycles)
    (28 . compressed-accumulated-power)
    (29 . accumulated-power)
    (30 . left-right-balance)
    (31 . gps-accuracy)
    (32 . vertical-speed)
    (33 . calories)
    (39 . vertical-oscillation)
    (40 . stance-time-percent)
    (41 . stance-time)
    (42 . activity-type)
    (43 . left-torque-effectiveness)
    (44 . right-torque-effectiveness)
    (45 . left-pedal-smoothness)
    (46 . right-pedal-smoothness)
    (47 . combined-pedal-smoothness)
    (48 . time128)
    (49 . stroke-type)
    (50 . zone)
    (51 . ball-speed)
    (52 . cadence256)
    (53 . fractional-cadence)
    (54 . total-hemoglobin-conc)
    (55 . total-hemoglobin-conc-min)
    (56 . total-hemoglobin-conc-max)
    (57 . saturated-hemoglobin-percent)
    (58 . saturated-hemoglobin-percent-min)
    (59 . saturated-hemoglobin-percent-max)
    (62 . device-index)
    (67 . left-pco)
    (68 . right-pco)
    (69 . left-pp)
    (70 . left-peak-pp)
    (71 . right-pp)
    (72 . right-peak-pp)
    (83 . vertical-ratio)
    (84 . stance-time-balance)
    (85 . stride-length)))

(provide *record-fields*)

(define *lap-fields*
  '((254 . message-index)
    (253 . timestamp)
    (0 . event)
    (1 . event-type)
    (2 . start-time)
    (3 . start-position-lat)
    (4 . start-position-long)
    (5 . end-position-lat)
    (6 . end-position-long)
    (7 . total-elapsed-time)
    (8 . total-timer-time)
    (9 . total-distance)
    (10 . total-cycles)
    ;( . total-strides)
    (11 . total-calories)
    (12 . total-fat-calories)
    (13 . avg-speed)
    (14 . max-speed)
    (15 . avg-heart-rate)
    (16 . max-heart-rate)
    (17 . avg-cadence)
    ;( . avg-running-cadence)
    (18 . max-cadence)
    ;( . max-running-cadence)
    (19 . avg-power)
    (20 . max-power)
    (21 . total-ascent)
    (22 . total-descent)
    (23 . intensity)
    (24 . lap-trigger)
    (25 . sport)
    (26 . event-group)
    (32 . num-lengths)
    (33 . normalized-power)
    (34 . left-right-balance)
    (35 . first-length-index)
    (37 . avg-stroke-distance)
    (38 . swim-stroke)
    (39 . sub-sport)
    (40 . num-active-lengths)
    (41 . total-work)
    (42 . avg-altitude)
    (43 . max-altitude)
    (44 . gps-accuracy)
    (45 . avg-grade)
    (46 . avg-pos-grade)
    (47 . avg-neg-grade)
    (48 . max-pos-grade)
    (49 . max-neg-grade)
    (50 . avg-temperature)
    (51 . max-temperature)
    (52 . total-moving-time)
    (53 . avg-pos-vertical-speed)
    (54 . avg-neg-vertical-speed)
    (55 . max-pos-vertical-speed)
    (56 . max-neg-vertical-speed)
    (57 . time-in-hr-zone)
    (58 . time-in-speed-zone)
    (59 . time-in-cadence-zone)
    (60 . time-in-power-zone)
    (61 . repetition-num)
    (62 . min-altitude)
    (63 . min-heart-rate)
    (71 . wkt-step-index)
    (74 . opponent-score)
    (75 . stroke-count)
    (76 . zone-count)
    (77 . avg-vertical-oscillation)
    (78 . avg-stance-time-percent)
    (79 . avg-stance-time)
    (80 . avg-fractional-cadence)
    (81 . max-fractional-cadence)
    (82 . total-fractional-cycles)
    (83 . player-score)
    (84 . avg-total-hemoglobin-conc)
    (85 . min-total-hemoglobin-conc)
    (86 . max-total-hemoglobin-conc)
    (87 . avg-saturated-hemoglobin-percent)
    (88 . min-saturated-hemoglobin-percent)
    (89 . max-saturated-hemoglobin-percent)
    (91 . avg-left-torque-effectiveness)
    (92 . avg-right-torque-effectiveness)
    (93 . avg-left-pedal-smoothness)
    (94 . avg-right-pedal-smoothness)
    (95 . avg-combined-pedal-smoothness)
    (98 . time-standing)
    (99 . stand-count)
    (100 . avg-left-pco)
    (101 . avg-right-pco)
    (102 . avg-left-pp)
    (103 . avg-left-peak-pp)
    (104 . avg-right-pp)
    (105 . avg-right-peak-pp)
    (106 . avg-power-position)
    (107 . max-power-position)
    (108 . avg-cadence-position)
    (109 . max-cadence-position)
    (118 . avg-vertical-ratio)
    (119 . stance-time-balance)
    (120 . avg-stride-length)))

(define *session-fields*
  '((254 . message-index)
    (253 . timestamp)
    (0 . event)
    (1 . event-type)
    (2 . start-time)
    (3 . start-position-lat)
    (4 . start-position-long)
    (5 . sport)
    (6 . sub-sport)
    (7 . total-elapsed-time)
    (8 . total-timer-time)
    (9 . total-distance)
    (10 . total-cycles)
    ; ( . total-strides)
    (11 . total-calories)
    (13 . total-fat-calories)
    (14 . avg-speed)
    (15 . max-speed)
    (16 . avg-heart-rate)
    (17 . max-heart-rate)
    (18 . avg-cadence)
    ;( . avg-running-cadence)
    (19 . max-cadence)
    ;( . max-running-cadence)
    (20 . avg-power)
    (21 . max-power)
    (22 . total-ascent)
    (23 . total-descent)
    (24 . total-training-effect)
    (25 . first-lap-index)
    (26 . num-laps)
    (27 . event-group)
    (28 . trigger)
    (29 . nec-lat)
    (30 . nec-long)
    (31 . swc-lat)
    (32 . swc-long)
    (34 . normalized-power)
    (35 . training-stress-score)
    (36 . intensity-factor)
    (37 . left-right-balance)
    (41 . avg-stroke-count)
    (42 . avg-stroke-distance)
    (43 . swim-stroke)
    (44 . pool-length)
    (46 . pool-length-unit)
    (47 . num-active-lengths)
    (48 . total-work)
    (49 . avg-altitude)
    (50 . max-altitude)
    (51 . gps-accuracy)
    (52 . avg-grade)
    (53 . avg-pos-grade)
    (54 . avg-neg-grade)
    (55 . max-pos-grade)
    (56 . max-neg-grade)
    (57 . avg-temperature)
    (58 . max-temperature)
    (59 . total-moving-time)
    (60 . avg-pos-vertical-speed)
    (61 . avg-neg-vertical-speed)
    (62 . max-pos-vertical-speed)
    (63 . max-neg-vertical-speed)
    (64 . min-heart-rate)
    (65 . time-in-hr-zone)
    (66 . time-in-speed-zone)
    (67 . time-in-cadence-zone)
    (68 . time-in-power-zone)
    (69 . avg-lap-time)
    (70 . best-lap-index)
    (71 . min-altitude)
    (82 . player-score)
    (83 . opponent-score)
    (84 . opponent-name)
    (85 . stroke-count)
    (86 . zone-count)
    (87 . max-ball-speed)
    (88 . avg-ball-speed)
    (89 . avg-vertical-oscillation)
    (90 . avg-stance-time-percent)
    (91 . avg-stance-time)
    (92 . avg-fractional-cadence)
    (93 . max-fractional-cadence)
    (94 . total-fractional-cycles)
    (95 . avg-total-hemoglobin-conc)
    (96 . min-total-hemoglobin-conc)
    (97 . max-total-hemoglobin-conc)
    (98 . avg-saturated-hemoglobin-percent)
    (99 . min-saturated-hemoglobin-percent)
    (100 . max-saturated-hemoglobin-percent)
    (101 . avg-left-torque-effectiveness)
    (102 . avg-right-torque-effectiveness)
    (103 . avg-left-pedal-smoothness)
    (104 . avg-right-pedal-smoothness)
    (105 . avg-combined-pedal-smoothness)
    (112 . time-standing)
    (113 . stand-count)
    (114 . avg-left-pco)
    (115 . avg-right-pco)
    (116 . avg-left-pp)
    (117 . avg-left-peak-pp)
    (118 . avg-right-pp)
    (119 . avg-right-peak-pp)
    (120 . avg-power-position)
    (121 . max-power-position)
    (122 . avg-cadence-position)
    (123 . max-cadence-position)
    (132 . avg-vertical-ratio)
    (133 . stance-time-balance)
    (134 . avg-stride-length)))

(define *activity-fields*
  '((253 . timestamp)
    (0 . total-timer-time)
    (1 . num-sessions)
    (2 . type)
    (3 . event)
    (4 . event-type)
    (5 . local-timestamp)
    (6 . event-group)))

(define *length-fields*
  '((254 . message-index)
    (253 . timestamp)
    (0 . event)
    (1 . event-type)
    (2 . start-time)
    (3 . total-elapsed-time)
    (4 . total-timer-time)
    (5 . total-strokes)
    (6 . avg-speed)
    (7 . swim-stroke)
    (9 . avg-swimming-cadence)
    (10 . event-group)
    (11 . total-calories)
    (12 . length-type)
    (18 . player-score)
    (19 . opponent-score)
    (20 . stroke-count)
    (21 . zone-count)))

(define *device-info-fields*
  '((253 . timestamp)
    (0 . device-index)
    (1 . ant-device-type)
    ; ( . antplus-device-type)
    (2 . manufacturer)
    (3 . serial-number)
    (4 . product)
    (5 . software-version)
    (6 . hardware-version)
    (7 . cum-operating-time)
    (10 . battery-voltage)
    (11 . battery-status)
    (18 . sensor-position)
    (19 . descriptor)
    (20 . ant-transmission-type)
    (21 . ant-device-number)
    (22 . ant-network)
    (25 . source-type)))

(define *location-fields*
  ;; This is not documented in the fit format.  It was reverse engineered from
  ;; a Foreruner 310XT locations FIT file
  '((253 . timestamp)
    (254 . location-index)
    (0 . location-name)
    (1 . position-lat)
    (2 . position-long)
    (4 . altitude)))

(define *workout-fields*
  '((4 . sport)
    (5 . capabilities)
    (6 . num-steps)
    (8 . name)))

(define *workout-step-fields*
  `((0 . name)
    (1 . duration-type)
    (2 . duration-value)
    (3 . target-type)
    (4 . target-value)
    (5 . custom-target-value-low)
    (6 . custom-target-value-high)
    (7 . intensity)
    (254 . message-index)))

(define *sport-fields*
  '((0 . sport)
    (1 . sub-sport)
    (3 . name)))

(define *hr-zone-fields*
  '((254 . message-index)
    (1 . high-bpm)
    (2 . name)))

(define *speed-zone-fields*
  '((254 . message-index)
    (1 . high-value)
    (2 . name)))

(define *power-zone-fields*
  '((254 . message-index)
    (1 . high-value)
    (2 . name)))

(define *zones-target-fields*
  '((1 . max-heart-rate)
    (2 . threshold-heart-rate)
    (3 . functional-threshold-power)
    (5 . hr-calculation-type)
    (7 . power-calculation-type)))

(define *training-file-fields*
  '((253 . timestamp)
    (0 . type)
    (1 . manufacturer)
    (2 . product)
    (3 . serial-number)
    (4 . time-created)))

(define *user-profile-fields*
  '((254 . message_index)
    (0 . friendly-name)
    (1 . gender)
    (2 . age)
    (3 . height)
    (4 . weight)
    (5 . language)
    (6 . elevation-setting)
    (7 . weight-setting)
    (8 . resting-heart-rate)
    (9 . default-max-running-heart-rate)
    (10 . default-max-biking-heart-rate)
    (11 . default-max-heart-rate)
    (12 . hr-setting)
    (13 . speed-setting)
    (14 . distance-setting)
    (16 . power-setting)
    (17 . activity-class)
    (18 . position-setting)
    (21 . temperature-setting)
    (22 . local-id)
    (23 . global-id)
    (24 . birth-year)
    (30 . height-setting)))

(define *developer-id-fields*
  '((0 . developer-id)
    (1 . application-id)
    (2 . manufacturer-id)
    (3 . developer-data-index)
    (4 . application-version)))

(define *field-description-fields*
  '((0 . developer-data-index)
    (1 . field-def-number)
    (2 . fit-base-type)
    (3 . field-name)
    (4 . array)
    (5 . components)
    (6 . scale)
    (7 . offset)
    (8 . units)
    (9 . bits)
    (10 . accumulate)
    (13 . fit-base-unit)
    (14 . native-msg-num)
    (15 . native-field-num)))

(define *field-db*
  ;; map a global message ID to its available fields
  `((file-id . ,*file-id-fields*)
    (file-creator . ,*file-creator-fields*)
    (event . ,*event-fields*)
    (record . ,*record-fields*)
    (lap . ,*lap-fields*)
    (activity . ,*activity-fields*)
    (length . ,*length-fields*)
    (session . ,*session-fields*)
    (device-info . ,*device-info-fields*)
    (location . ,*location-fields*)
    (workout . ,*workout-fields*)
    (workout-step . ,*workout-step-fields*)
    (sport . ,*sport-fields*)
    (hr-zone . ,*hr-zone-fields*)
    (speed-zone . ,*speed-zone-fields*)
    (power-zone . ,*power-zone-fields*)
    (zones-target . ,*zones-target-fields*)
    (training-file . ,*training-file-fields*)
    (user-profile . ,*user-profile-fields*)
    (developer-data-id . ,*developer-id-fields*)
    (field-description . ,*field-description-fields*)))

(provide *field-db*)

(define *activity-type*
  '((0 . manual)
    (1 . auto-multi-sport)))

(define *event-name*
  '((0 . timer)
    (3 . workout)
    (4 . workout-step)
    (5 . power-down)
    (6 . power-up)
    (7 . off-course)
    (8 . session)
    (9 . lap)
    (10 . course-point)
    (11 . battery)
    (12 . virtual-partner-pace)
    (13 . hr-high-alert)
    (14 . hr-low-alert)
    (15 . speed-high-alert)
    (16 . speed-low-alert)
    (17 . cad-high-alert)
    (18 . cad-low-alert)
    (19 . power-high-alert)
    (20 . power-low-alert)
    (21 . recovery-hr)
    (22 . battery-low)
    (23 . time-duration-alert)
    (24 . distance-duration-alert)
    (25 . calorie-duration-alert)
    (26 . activity)
    (27 . fitness-equipment)
    (28 . length)
    (32 . user-marker)
    (33 . sport-point)
    (36 . calibration)

    ;; The next three values are undocumented in the FIT SDK.
    (37 . vo2-max)
    (38 . recovery-time)
    (39 . recovery-status)

    (42 . front-gear-change)
    (43 . rear-gear-change)
    (44 . rider-position-change)
    (45 . elevation-high-alert)
    (46 . elevation-low-alert)))

(define *event-type*
  '((0 . start)
    (1 . stop)
    (2 . consecutive-depreciated)
    (3 . marker)
    (4 . stop-all)
    (5 . begin-depreciated)
    (6 . end-depreciated)
    (7 . end-all-depreciated)
    (8 . stop-disable)
    (9 . stop-disable-all)))

(define *file-type*
  '((1 . device)
    (2 . settings)
    (3 . sport)
    (4 . activity)
    (5 . workout)
    (6 . course)
    (7 . schedules)
    (8 . locations)
    (9 . weight)
    (10 . totals)
    (11 . goals)
    (14 . blood-pressure)
    (15 . monitoring-a)
    (20 . activity-summary)
    (28 . monitoring-daily)
    (23 . monitoring-b)))

(define *manfacturer*                   ; NOTE: not the full list of manufacturers
  '((1 . garmin)))

(provide *manfacturer*)

(define *garmin-product*
  '((1 . hrm1)
    (2 . axh01)
    (3 . axb01)
    (4 . axb02)
    (5 . hrm2ss)
    (6 . dsi-alf02)
    (8 . hrm-run-single-byte-product-id)
    (473 . fr301-china)
    (474 . fr301-japan)
    (475 . fr301-korea)
    (494 . fr301-taiwan)
    (717 . fr405)
    (782 . fr50)
    (987 . fr405-japan)
    (988 . fr60)
    (1011 . dsi-alf01)
    (1018 . fr310xt)
    (1036 . edge500)
    (1124 . fr110)
    (1169 . edge800)
    (1199 . edge500-taiwan)
    (1213 . edge500-japan)
    (1253 . chirp)
    (1274 . fr110-japan)
    (1325 . edge200)
    (1328 . fr910xt)
    (1333 . edge800-taiwan)
    (1334 . edge800-japan)
    (1341 . alf04)
    (1345 . fr610)
    (1360 . fr210-japan)
    (1381 . vector)
    (1386 . edge800-china)
    (1387 . edge500-china)
    (1410 . fr610-japan)
    (1422 . edge500-korea)
    (1436 . fr70)
    (1446 . fr310xt-4t)
    (1461 . amx)
    (1482 . fr10)
    (1497 . edge800-korea)
    (1499 . swim)
    (1537 . fr910xt-china)
    (1551 . fenix)
    (1555 . edge200-taiwan)
    (1561 . edge510)
    (1567 . edge810)
    (1570 . tempe)
    (1600 . fr910xt-japan)
    (1664 . fr910xt-korea)
    (1688 . fr10-japan)
    (1721 . edge810-japan)
    (1735 . virb-elite)
    (1736 . edge-touring)
    (1742 . edge510-japan)
    (1752 . hrm-run)
    (1765 . fr920xt)
    (1821 . edge510-asia)
    (1822 . edge810-china)
    (1823 . edge810-taiwan)
    (1836 . edge1000)
    (1837 . vivo_fit)
    (1853 . virb_remote)
    (1885 . vivo_ki)
    (1903 . fr15)
    (1907 . vivo_active)
    (1918 . edge510_korea)
    (1928 . fr620_japan)
    (1929 . fr620_china)
    (1930 . fr220_japan)
    (1931 . fr220_china)
    (1936 . approach_s6)
    (1956 . vivo_smart)
    (1967 . fenix2)
    (1988 . epix)
    (2050 . fenix3)
    (2052 . edge1000_taiwan)
    (2053 . edge1000_japan)
    (2061 . fr15_japan)
    (2067 . edge520)
    (2070 . edge1000_china)
    (2072 . fr620_russia)
    (2073 . fr220_russia)
    (2079 . vector_s)
    (2100 . edge1000_korea)
    (2130 . fr920xt_taiwan)
    (2131 . fr920xt_china)
    (2132 . fr920xt_japan)
    (2134 . virbx)
    (2135 . vivo_smart_apac)
    (2140 . etrex_touch)
    (2147 . edge25)
    (2150 . vivo_fit2)
    (2153 . fr225)
    (2160 . vivo_active_apac)
    (2161 . vector_2)
    (2162 . vector_2s)
    (2172 . virbxe)
    (2173 . fr620_taiwan)
    (2174 . fr220_taiwan)
    (2188 . fenix3_china)
    (2189 . fenix3_twn)
    (2192 . varia_headlight)
    (2193 . varia_taillight_old)
    (2219 . fr225_asia)
    (2225 . varia_radar_taillight)
    (2226 . varia_radar_display)
    (2238 . edge20)
    (2262 . d2_bravo)
    (2276 . varia_remote )
    (2327 . hrm4)
    (10007 . sdm4)
    (20119 . training-center)
    (65532 . android-antplus-plugin)
    (65534 . connect)))

(provide *garmin-product*)

(define *sport*
  '((0 . generic)
    (1 . running)
    (2 . cycling)
    (3 . transition)
    (4 . fitness-equipment)
    (5 . swimming)
    (6 . basketball)
    (7 . soccer)
    (8 . tennis)
    (9 . american-football)
    (10 . training)
    (12 . cross-country-skiing)
    (13 . alpine-skiing)
    (14 . snowboarding)
    (15 . rowing)
    (254 . all)))

(provide *sport*)

(define *sub-sport*
  '((0 . generic)
    (1 . treadmill)
    (2 . street)
    (3 . trail)
    (4 . track)
    (5 . spin)
    (6 . indoor-cycling)
    (7 . road)
    (8 . mountain)
    (9 . downhill)
    (10 . recumbent)
    (11 . cyclocross)
    (12 . hand-cycling)
    (13 . track-cycling)
    (14 . indoor-rowing)
    (15 . elliptical)
    (16 . stair-climbing)
    (17 . lap-swimming)
    (18 . open-water)
    (19 . flexibility-training)
    (20 . strength-training)
    (21 . warm-up)
    (22 . match)
    (23 . exercise)
    (24 . challenge)
    (25 . indoor-skiing)
    (254 . all)))

(provide *sub-sport*)

(define *session-trigger*
  '((0 . activity-end)
    (1 . manual)
    (2 . auto-multi-sport)
    (3 . fitness-equipment)))

(define *swim-stroke*
  '((0 . freestyle)
    (1 . backstroke)
    (2 . breaststroke)
    (3 . butterfly)
    (4 . drill)
    (5 . mixed)
    (6 . im)))

(define *pool-length-unit*
  '((0 . meters)
    (1 . yards)))

(provide *pool-length-unit*)

(define *intensity*
  '((0 . active)
    (1 . rest)
    (2 . warmup)
    (3 . cooldown)))

(define *lap-trigger*
  '((0 . manual)
    (1 . time)
    (2 . distance)
    (3 . position-start)
    (4 . position-lap)
    (5 . position-waypoint)
    (6 . position-marked)
    (7 . session-end)
    (8 . fitness-equipment)))

(define *stroke-type*
  '((0 . no-event)
    (1 . other)
    (2 . serve)
    (3 . forehand)
    (4 . backhand)
    (5 . smash)))

(define *length-type*
  '((0 . idle)
    (1 . active)))

(define *antplus-device-type*
  '((1 . antfs)
    (11 . bike-power)
    (12 . environment-sensor-legacy)
    (15 . multi-sport-speed-distance)
    (16 . control)
    (17 . fitness-equipment)
    (18 . blood-pressure)
    (19 . geocache-node)
    (20 . light-electric-vehicle)
    (25 . env-sensor)
    (26 . racquet)
    (119 . weight-scale)
    (120 . heart-rate)
    (121 . bike-speed-cadence)
    (122 . bike-cadence)
    (123 . bike-speed)
    (124 . stride-speed-distance)))

(define *source-type*
  '((0 . ant)
    (1 . antplus)
    (2 . bluetooth)
    (3 . bluetooth-le)
    (4 . wifi)
    (5 . local)))                       ; on-board device

(define *battery-status*
  '((1 . new)
    (2 . good)
    (3 . ok)
    (4 . low)
    (5 . critical)
    (6 . charging)
    (7 . unknown)))

(define *workout-step-duration*
  '((0 . time)
    (1 . distance)
    (2 . hr-less-than)
    (3 . hr-greater-than)
    (4 . calories)
    (5 . open)
    (6 . repeat-until-steps-cmplt)
    (7 . repeat-until-time)
    (8 . repeat-until-distance)
    (9 . repeat-until-calories)
    (10 . repeat-until-hr-less-than)
    (11 . repeat-until-hr-greater-than)
    (12 . repeat-until-power-less-than)
    (13 . repeat-until-power-greater-than)
    (14 . power-less-than)
    (15 . power-greater-than)
    (28 . repetition-time)))

(define *workout-step-intensity*
  '((0 . active)
    (1 . rest)
    (2 . warmup)
    (3 . cooldown)
    (4 . recover)))

(define *workout-step-target*
  '((0 . speed)
    (1 . heart-rate)
    (2 . open)
    (3 . cadence)
    (4 . power)
    (5 . grade)
    (6 . resistance)))

(define *hr-zone-calc*
  '((0 . custom)
    (1 . percent-max-hr)
    (2 . percent-hrr)))

(define *power-zone-calc*
  '((0 . custom)
    (1 . percent-ftp)))

(define *display-measure*
  '((0 . metric)
    (1 . statute)))

(define *display-heart*
  '((0 . bpm)
    (1 . percent-of-max)
    (2 . percent-of-hrr)))

(define *display-power*
  '((0 . watts)
    (1 . percent-of-ftp)))


;.................................................... conversion tables ....

;; data in the field are encoded for a compact representation.  For example
;; latitude is represented as a signed 32 bit value representing the -180
;; .. 180 degree range. Since this representation is inconvenient for general
;; use, we define conversions for all fields where this makes sense.

(define *file-id-conversions*
  `((type         . ,(make-enum-lookup *file-type*))
    (manufacturer . ,(make-enum-lookup *manfacturer*))
    (product      . ,(make-enum-lookup *garmin-product*))
    (time-created . ,fit-time->unix-time)))

(define *activity-conversions*
  `((timestamp        . ,fit-time->unix-time)
    (total-timer-time . ,div-by-1000)
    (local-timestamp  . ,fit-time->unix-time-local)
    (type             . ,(make-enum-lookup *activity-type*))
    (event            . ,(make-enum-lookup *event-name*))
    (event-type       . ,(make-enum-lookup *event-type*))))

(define *session-conversions*
  `((timestamp             . ,fit-time->unix-time)
    (event                 . ,(make-enum-lookup *event-name*))
    (event-type            . ,(make-enum-lookup *event-type*))
    (start-time            . ,fit-time->unix-time)
    (start-position-lat    . ,semicircles->degrees)
    (start-position-long   . ,semicircles->degrees)
    (sport                 . ,(make-enum-lookup *sport*))
    (sub-sport             . ,(make-enum-lookup *sub-sport*))
    (total-elapsed-time    . ,div-by-1000)
    (total-timer-time      . ,div-by-1000)
    (total-moving-time     . ,div-by-1000)
    (total-distance        . ,div-by-100)
    (avg-speed             . ,div-by-1000)
    (max-speed             . ,div-by-1000)
    (total-training-effect . ,div-by-10)
    (trigger               . ,(make-enum-lookup *session-trigger*))
    (training-stress-score . ,div-by-10)
    (intensity-factor      . ,div-by-1000)
    (avg-stroke-count      . ,div-by-10)
    (avg-stroke-distance   . ,div-by-100)
    ;; (swim-stroke           . ,(make-enum-lookup *swim-stroke*))
    (pool-length           . ,div-by-100)
    (pool-length-unit      . ,(make-enum-lookup *pool-length-unit*))
    (avg-vertical-oscillation . ,div-by-10)
    (avg-stance-time-percent  . ,div-by-100)
    (avg-stance-time          . ,div-by-10)
    (avg-fractional-cadence   . ,div-by-128)
    (max-fractional-cadence   . ,div-by-128)
    (nec-lat               . ,semicircles->degrees)
    (nec-long              . ,semicircles->degrees)
    (swc-lat               . ,semicircles->degrees)
    (swc-long              . ,semicircles->degrees)
    (left-right-balance    . ,(lambda (v) (/ (bitwise-and v #x7fff) 100.0)))
    (avg-left-torque-effectiveness . ,div-by-2)
    (avg-right-torque-effectiveness . ,div-by-2)
    (avg-left-pedal-smoothness . ,div-by-2)
    (avg-right-pedal-smoothness . ,div-by-2)
    (avg-vertical-ratio       . ,div-by-100)
    (stance-time-balance  . ,div-by-100)
    (avg-stride-length        . ,div-by-10000)))

(define *lap-conversions*
  `((timestamp             . ,fit-time->unix-time)
    (event                 . ,(make-enum-lookup *event-name*))
    (event-type            . ,(make-enum-lookup *event-type*))
    (start-time            . ,fit-time->unix-time)
    (start-position-lat    . ,semicircles->degrees)
    (start-position-long   . ,semicircles->degrees)
    (end-position-lat      . ,semicircles->degrees)
    (end-position-long     . ,semicircles->degrees)
    (total-elapsed-time    . ,div-by-1000)
    (total-timer-time      . ,div-by-1000)
    (total-distance        . ,div-by-100)
    (avg-speed             . ,div-by-1000)
    (max-speed             . ,div-by-1000)
    (intensity             . ,(make-enum-lookup *intensity*))
    (lap-trigger           . ,(make-enum-lookup *lap-trigger*))
    (sport                 . ,(make-enum-lookup *sport*))
    ;; (swim-stroke           . ,(make-enum-lookup *swim-stroke*))
    (avg-stroke-distance   . ,div-by-100)
    (sub-sport             . ,(make-enum-lookup *sub-sport*))
    (total-moving-time     . ,div-by-1000)
    (avg-vertical-oscillation . ,div-by-10)
    (avg-stance-time-percent  . ,div-by-100)
    (avg-stance-time          . ,div-by-10)
    (avg-fractional-cadence   . ,div-by-128)
    (max-fractional-cadence   . ,div-by-128)
    (left-right-balance    . ,(lambda (v) (/ (bitwise-and v #x7fff) 100)))
    (avg-left-torque-effectiveness . ,div-by-2)
    (avg-right-torque-effectiveness . ,div-by-2)
    (avg-left-pedal-smoothness . ,div-by-2)
    (avg-right-pedal-smoothness . ,div-by-2)
    (time-standing . ,div-by-1000)
    (avg-vertical-ratio       . ,div-by-100)
    (stance-time-balance  . ,div-by-100)
    (avg-stride-length        . ,div-by-10000)))

(define *length-conversions*
  `((timestamp          . ,fit-time->unix-time)
    (event              . ,(make-enum-lookup *event-name*))
    (event-type         . ,(make-enum-lookup *event-type*))
    (start-time         . ,fit-time->unix-time)
    (total-elapsed-time . ,div-by-1000)
    (total-timer-time   . ,div-by-1000)
    (avg-speed          . ,div-by-1000)
    ;; (swim-stroke        . ,(make-enum-lookup *swim-stroke*))
    (length-type        . ,(make-enum-lookup *length-type*))))

(define *record-conversions*
  `((timestamp            . ,fit-time->unix-time)
    (position-lat         . ,semicircles->degrees)
    (position-long        . ,semicircles->degrees)
    (altitude             . ,(lambda (v) (- (/ v 5.0) 500)))
    (distance             . ,div-by-100)
    (speed                . ,div-by-1000)
    (grade                . ,div-by-100)
    (time-from-course     . ,div-by-1000)
    (cycle-length         . ,div-by-100)
    (vertical-speed       . ,div-by-1000)
    (vertical-oscillation . ,div-by-10)
    (stance-time-percent  . ,div-by-100)
    (stance-time          . ,div-by-10)
    (activity-type        . ,(make-enum-lookup *activity-type*))
    (stroke-type          . ,(make-enum-lookup *stroke-type*))
    (fractional-cadence   . ,div-by-128)
    (left-right-balance    . ,(lambda (v) (bitwise-and v #x7f)))
    (left-torque-effectiveness . ,div-by-2)
    (right-torque-effectiveness . ,div-by-2)
    (left-pedal-smoothness . ,div-by-2)
    (right-pedal-smoothness . ,div-by-2)
    (vertical-ratio       . ,div-by-100)
    (stance-time-balance  . ,div-by-100)
    (stride-length        . ,div-by-10000)))

(define *event-conversions*
  `((timestamp  . ,fit-time->unix-time)
    (event      . ,(make-enum-lookup *event-name*))
    (event-type . ,(make-enum-lookup *event-type*))))

(define *device-info-conversions*
  `((timestamp           . ,fit-time->unix-time)
    (antplus-device-type . ,(make-enum-lookup *antplus-device-type*))
    (ant-device-type     . ,(make-enum-lookup *antplus-device-type*))
    (manufacturer        . ,(make-enum-lookup *manfacturer*))
    (product             . ,(make-enum-lookup *garmin-product*))
    (battery-status      . ,(make-enum-lookup *battery-status*))
    (battery-voltage     . ,(lambda (v) (and v (/ v 256.0))))
    (source-type         . ,(make-enum-lookup *source-type*))))

(define *location-conversions*
  `((timestamp            . ,fit-time->unix-time)
    (position-lat         . ,semicircles->degrees)
    (position-long        . ,semicircles->degrees)
    (altitude             . ,(lambda (v) (- (/ v 5.0) 500)))))

(define *workout-conversions*
  `((sport                 . ,(make-enum-lookup *sport*))))

(define *workout-step-conversions*
  `((duration-type . ,(make-enum-lookup *workout-step-duration*))
    ;; (duration-value)
    (target-type . ,(make-enum-lookup *workout-step-target*))
    ;; (target-value)
    ;; (custom-target-value-low)
    ;; (custom-target-value-high)
    (intensity . ,(make-enum-lookup *workout-step-intensity*))
    ))

(define *sport-conversions*
  `((sport                 . ,(make-enum-lookup *sport*))
    (sub-sport             . ,(make-enum-lookup *sub-sport*))))

(define *zones-target-conversions*
  `((hr-calculation-type . ,(make-enum-lookup *hr-zone-calc*))
    (power-calculation-type . ,(make-enum-lookup *power-zone-calc*))))

(define *training-file-conversions*
  `((timestamp    . ,fit-time->unix-time)
    (time-created . ,fit-time->unix-time)
    (type         . ,(make-enum-lookup *file-type*))))

(define *user-profile-conversions*
  `((hr-setting . ,(make-enum-lookup *display-heart*))
    (speed-setting . ,(make-enum-lookup *display-measure*))
    (distance-setting . ,(make-enum-lookup *display-measure*))
    (power-setting . ,(make-enum-lookup *display-power*))
    (weight-setting . ,(make-enum-lookup *display-measure*))
    (elevation-setting . ,(make-enum-lookup *display-measure*))
    (weight . ,div-by-10)
    (height . ,div-by-100)
    (temperature-setting . ,(make-enum-lookup *display-measure*))
    (height-setting . ,(make-enum-lookup *display-measure*))))

(define *field-conversion-db*
  `((file-id      . ,*file-id-conversions*)
    (session      . ,*session-conversions*)
    (lap          . ,*lap-conversions*)
    (length       . ,*length-conversions*)
    (record       . ,*record-conversions*)
    (activity     . ,*activity-conversions*)
    (device-info  . ,*device-info-conversions*)
    (event        . ,*event-conversions*)
    (location     . ,*location-conversions*)
    (workout      . ,*workout-conversions*)
    (workout-step . ,*workout-step-conversions*)
    (sport        . ,*sport-conversions*)
    (zones-target . ,*zones-target-conversions*)
    (training-file . ,*training-file-conversions*)
    (user-profile . ,*user-profile-conversions*)))

(provide *field-conversion-db*)
